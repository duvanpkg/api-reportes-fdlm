import axios from "axios";

const apiUrl = "http://172.28.101.54:3000/generate-report";
const solicitudes = [
  "7372109342",
  "1012386972",
  "1062387069",
  "1012386948",
  "1022358578",
  "1022358579",
  "1022358581",
  "1022358583",
  "1022358586",
  "1022358587",
  "1022358590",
  "1022358592",
  "1022358593",
  "1022358595",
  "1022358596",
  "1022358597",
  "1022358598",
  "1022358600",
  "1022358601",
  "1022358603",
  "1022358604",
  "1022358605",
  "1022358618",
  "1022358638",
  "1062387041",
  "1062387042",
  "1062387043",
  "1062387046",
  "1062387053",
  "1062387055",
  "1062387056",
  "1062387058",
  "1062387060",
  "1062387062",
  "1062387063",
  "4102339836",
  "7282111413",
  "1062387049",
  "1062387048",
  "1062387051",
  "1062387052",
  "1062182655",
  "4082117759",
  "2162120378",
  "2012121368",
  "2012328840",
  "2022186967",
  "2022393101",
  "8092118837",
  "2022186972",
  "2022288855",
  "2022289639",
  "6532114600",
  "3042120708",
  "3042222322",
  "3042323113",
  "5022154437",
  "5022361358",
  "5022361830",
  "3022122915",
  "6252116025",
  "6042121324",
  "4102133343",
  "4102236085",
  "6652109017",
  "6162119329",
  "7152119889",
  "5092119213",
  "5092119937",
  "5092221277",
  "5092221308",
  "5092322144",
  "1142121460",
  "1142122019",
  "6532114604",
  "2022186968",
  "1412112193",
  "4092123822",
  "2082181940",
  "4052123695",
  "4052225619",
  "8242111750",
  "1052187803",
  "6352116513",
  "6352217525",
  "7182119989",
  "7182221799",
  "7182322963",
  "6012169274",
  "6552112267",
  "6552112663",
  "6552313876",
  "6552314634",
  "5072138414",
  "5072240831",
  "5072240832",
  "5072242496",
  "5072343151",
  "5232128435",
  "4062120730",
  "4062222258",
  "7092118114",
  "7092219105",
  "7092219536",
  "7092320335",
  "7092320530",
  "9002187638",
  "6692108434",
  "6692309118",
  "6692309127",
  "6692309303",
  "1062182912",
  "1062386805",
  "5232128463",
  "7172123996",
  "7172326887",
  "8332110472",
  "9042107511",
  "5072138415",
  "5072138546",
  "6462113885",
  "1142121459",
  "7332106835",
  "7332207221",
  "7332207339",
  "7332308081",
  "8072114312",
  "8072114707",
  "1062183048",
  "1062183114",
  "4062120731",
  "4062221675",
  "8282110761",
  "3062120837",
  "3062121641",
  "8142225731",
  "1022156052",
  "7252133976",
  "8062115285",
  "1022156057",
  "6112114906",
  "6112115089",
  "7092118112",
  "7092219049",
  "2132117923",
  "2072114222",
  "2072217511",
  "1042144232",
  "1042246578",
  "1172302647",
  "4022192776",
  "4022295825",
  "5292112360",
  "5292213298",
  "5232128459",
  "6412114237",
  "6412315534",
  "7122120532",
  "7122221380",
  "2022186954",
  "2022391951",
  "3092126151",
  "3092331559",
  "1042144253",
  "1042144262",
  "1042347606",
  "7192116220",
  "7192116228",
  "7192217929",
  "7192217934",
  "7192218048",
  "1412112185",
  "1412313780",
  "2012121369",
  "2012225817",
  "2042106751",
  "2042106896",
  "2042107160",
  "2042211706",
  "2042313271",
  "3092125882",
  "3092127538",
  "3092127609",
  "3092229040",
  "3092229066",
  "3092230253",
  "4112129175",
  "1392114670",
  "1392215558",
  "1392215568",
  "7252133968",
  "4022193096",
  "5232128461",
  "5042182371",
  "2172119690",
  "6242123242",
  "1402105154",
  "1402205702",
  "1402205959",
  "1402205960",
  "1272125066",
  "5122119737",
  "8172112296",
  "2042106255",
  "2042313179",
  "6802110945",
  "4102133310",
  "4102235857",
  "4032187980",
  "6242123235",
  "1352119269",
  "1352119271",
  "1052187805",
  "5032181348",
  "5032283276",
  "7232135536",
  "7232237681",
  "7232339602",
  "1292111526",
  "1292312490",
  "2072114013",
  "2072115500",
  "7312107527",
  "5042182373",
  "5162117736",
  "2052167519",
  "2052370277",
  "8082115626",
  "8082216531",
  "7152119891",
  "7152220835",
  "7152321805",
  "4032187971",
  "7182119990",
  "4062120729",
  "4032187981",
  "5072137864",
  "5072138398",
  "5222126355",
  "5232232877",
  "7302111764",
  "6052121551",
  "6052121565",
  "8072114311",
  "2122179057",
  "2122382010",
  "4102133340",
  "4102135288",
  "3042120710",
  "3042221492",
  "3042222273",
  "3042322527",
];

const realizarSolicitud = async (solicitud) => {
  try {
    const startTime = Date.now();

    axios
      .post(apiUrl, {
        parametros: [`Solicitud=${solicitud}`],
        numeroReporte: "3546",
        idTipoDoc: "20",
      })
      .then(() => {
        const endTime = Date.now();
        const elapsedTime = endTime - startTime;
        console.log(`Solicitud ${solicitud} enviada en ${elapsedTime} ms`);
      })
      .catch((error) => {
        console.error(`Error al procesar la solicitud ${solicitud}:`, error.message);
      });
  } catch (error) {
    console.error(`Error al procesar la solicitud ${solicitud}:`, error.message);
  }
};

const ejecutarPrueba = async () => {
  try {
    for (const solicitud of solicitudes) {
      realizarSolicitud(solicitud);
      await new Promise((resolve) => setTimeout(resolve, 3000)); // Esperar 3 segundos
    }

    console.log("Prueba completada.");
  } catch (error) {
    console.error("Error al ejecutar la prueba:", error.message);
  }
};

ejecutarPrueba();
